Este parte do trabalho é constituida maioritariamente por dois modulos:
O Cliente
Vai dar include a consulta.h para poder usar objetos do tipo consulta. A função criar_consulta pede ao utilizador para preencher os campos necessários para criar uma consulta, coloca essa informação em um objeto do tipo consulta e vai escrever um pedido de consulta. Se o ficheiro “PedidoConsulta.txt” não existir vai escrever as informações da consulta recebida nesse ficheiro, se o ficheiro existir vai esperar 10 segundos. Com a função ler_PID, vai ler o PID do servidor de consultas, que está escrito no ficheiro “SrvConsultas.pid” e enviar um sinal SIGURS1 para o servidor de consultas. Se receber um sinal SIGHUP  vai dizer que a consulta foi iniciada e apagar o ficheiro “PedidoConsulta.txt”. A variável s serve para verificar se o cliente recebeu um sinal SIGHUP antes de receber um SIGTERM. Se receber um sinal SIGTERM e tiver recebido um SIGHUP vai dizer que a consulta foi concluída. Se receber um sinal SIGUSR2 vai apagar o “PedidoConsulta.txt” e dizer que a consulta não é possível. Se receber um SIGINT vai dizer que o paciente cancelou o pedido, apagar o ficheiro “PedidoConsulta.txt” e termina o programa.
O Servidor
A função iniciar_lista_consultas vai colocar todas as consultas da lista_consultas com o tipo a -1. Quando uma consulta tem tipo=-1 considera-se que essa consulta não existe, logo é como se o espaço ocupado por essa consulta no vetor estivesse livre. Vai também colocar todos os contadores de tipos de consultas a 0 e vai escrever o PID do servidor de consultas no ficheiro “SrvConsultas.pid”. Quando recebe um sinal SISGUSR1 vai ler a informação do ficheiro “PedidoConsulta.txt” e guarda a informação retirada de lá em um novo objeto consulta, vai verificar se existem vagas, ou seja, se há alguma consulta na lista_consultas cujo tipo seja -1. Se não houver vagas diz que a lista de consultas está cheia, envia um sinal SISGUSR2 para o cliente e incrementa o contador de consultas perdidas. Se houver vagas agenda a consulta para a primeira sala livre, ou seja, a primeira posição no vetor lista_consultas que tenha uma consulta com tipo igual a -1, mais 1 visto que o número das salas começa a contar do 1 e não do 0. Usa um switch para incrementar o contador do tipo de consultas certo. Cria um processo filho que envia um sinal SIGHUP para o cliente e usa um alarme para contar 10 segundos, utilizo o pause() para poder evitar uma espera ativa. Passado os 10 segundos imprime que a consulta foi terminada, envia um sinal SIGTERM para o cliente e termina o processo filho. No entretanto, o processo pai tinha estado a aguardar que o processo filho terminasse. Vai apagar a consulta da lista_consultas, ou seja, vai colocar o seu tipo igual a -1. Se receber um sinal SIGINT vai apagar o ficheiro “SrvConsultas.pid”, escreve um ficheiro binário com as informações dos contadores e termina o programa.